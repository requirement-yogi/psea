<?xml version="1.0" encoding="UTF-8"?>

<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">

    <modelVersion>4.0.0</modelVersion>

    <groupId>com.requirementyogi.datacenter</groupId>
    <artifactId>psea-parent</artifactId>
    <version>2.0.1</version>

    <name>PSEA - Parent pom</name>
    <description>The add-on is a technical library that helps Requirement Yogi and Play SQL Spreadsheets export
        documents to Excel.
    </description>
    <packaging>pom</packaging>

    <licenses>
        <license>
            <name>Commercial</name>
            <url>https://docs.requirementyogi.com/legal/eula</url>
            <comments>The Requirement Yogi EULA applies to this software - See https://docs.requirementyogi.com/legal/eula</comments>
        </license>
    </licenses>

    <modules>
        <module>psea-api</module>
        <module>psea</module>
    </modules>


    <build>
        <pluginManagement>
            <!-- We set the plugin versions to get a deterministic build. To list versions to upgrade, see
                 mvn versions:display-dependency-updates
                 mvn versions:display-plugin-updates
                 mvn versions:display-property-updates -->
            <plugins>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-deploy-plugin</artifactId>
                    <version>3.1.2</version>
                </plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-install-plugin</artifactId>
                    <version>3.1.2</version>
                </plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-resources-plugin</artifactId>
                    <version>3.3.1</version>
                </plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-clean-plugin</artifactId>
                    <version>3.4.0</version>
                </plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-javadoc-plugin</artifactId>
                    <version>3.8.0</version>
                    <configuration>
                        <doclint>none</doclint>
                        <show>private</show>
                    </configuration>
                </plugin>
                <plugin>
                    <groupId>org.codehaus.mojo</groupId>
                    <artifactId>versions-maven-plugin</artifactId>
                    <version>2.17.1</version>
                </plugin>
                <plugin>
                    <groupId>org.codehaus.mojo</groupId>
                    <artifactId>build-helper-maven-plugin</artifactId>
                    <version>3.6.0</version>
                </plugin>
                <plugin>
                    <groupId>org.codehaus.mojo</groupId>
                    <artifactId>exec-maven-plugin</artifactId>
                    <version>3.3.0</version>
                </plugin>
                <plugin>
                    <groupId>org.owasp</groupId>
                    <artifactId>dependency-check-maven</artifactId>
                    <version>${libs.dependency-check-maven.version}</version>
                    <configuration>
                        <failBuildOnCVSS>${failBuildOnCVSS}</failBuildOnCVSS>
                        <skipProvidedScope>true</skipProvidedScope>
                        <skipRuntimeScope>true</skipRuntimeScope>
                        <nvdApiServerId>nvd</nvdApiServerId>
                        <nvdValidForHours>24</nvdValidForHours>
                        <nvdApiDelay>6000</nvdApiDelay> <!-- Wait 6 seconds between each request -->
                        <suppressionFile>src/owasp-vulnerability-suppression.xml</suppressionFile>
                        <!-- Set up a proxy on Bamboo using the instructions at https://github.com/stevespringett/nist-data-mirror .
                             Do NOT make it accessible from the outer world.
                             docker build \-\-rm -t sspringett/nvdmirror
                             docker run -dit \-\-name mirror -p 3221:3221 sspringett/nvdmirror
                        <cveUrlBase>http://localhost:3221/nvdcve-1.1-%d.json.gz</cveUrlBase>
                        <cveUrlModified>http://localhost:3221/nvdcve-1.1-modified.json.gz</cveUrlModified>
                        -->
                    </configuration>
                </plugin>
                <plugin>
                    <!-- This plugin, configured in <pluginManagement>, pre-configures the build.
                         But you need to call it in the child's <build> section.
                     -->
                    <groupId>org.codehaus.mojo</groupId>
                    <artifactId>license-maven-plugin</artifactId>
                    <version>2.4.0</version>
                    <configuration>
                        <!--
                            You don't need to run the license plugin manually, it is part of the build (see executions).
                            It retrieves all licenses of all dependencies into src/licenses/THIRD-PARTY-included-modules.txt

                            NB: How to retrieve licenses on a new project:
                            mvn clean license:download-licenses
                        -->
                        <projectName>${project.name}</projectName>

                        <organizationName>Requirement Yogi S.A.S.U.</organizationName>
                        <inceptionYear>2014</inceptionYear>

                        <!-- Skips the goal download-licenses -->
                        <skipDownloadLicenses>false</skipDownloadLicenses>
                        <!-- This is not an opensource project -->
                        <skipUpdateLicense>true</skipUpdateLicense>
                        <!-- The license of each module -->
                        <licenseFile>${project.basedir}/src/license/LICENSE.txt</licenseFile>
                        <useMissingFile>true</useMissingFile>
                        <sortArtifactByName>true</sortArtifactByName>
                        <!-- The file with the list of licenses, for those which can't be found automatically -->
                        <missingFile>src/license/THIRD-PARTY.properties</missingFile>
                        <!-- Same as 'missingFile' but in XML, probably -->
                        <licensesConfigFile>src/license/licenses-manual.xml</licensesConfigFile>
                        <!-- All licenses which could automatically be fetched. About the current module only.-->
                        <licensesOutputFile>src/license/licenses-generated.xml</licensesOutputFile>
                        <!-- Dump the text of all licenses of third parties. About the current module only. -->
                        <licensesOutputDirectory>src/license/text</licensesOutputDirectory>
                        <!-- A list of dependencies for the subtree and their licenses -->
                        <thirdPartyFilename>THIRD-PARTY-included-modules.txt</thirdPartyFilename>
                        <!-- Where to put the THIRD-PARTY.txt file -->
                        <outputDirectory>${project.basedir}/src/license</outputDirectory>
                        <!-- In the binary distribution, we exclude libraries which are only compiled against, as long
                             as they're not GPL. Atlassian Confluence is considered with a developer license. -->
                        <includedScopes>compile</includedScopes>
                        <licenseMerges>
                            <licenseMerge>Apache License 2.0|The Apache Software License, Version 2.0|Apache License,
                                Version 2.0|Apache Public License 2.0|Apache 2
                            </licenseMerge>
                        </licenseMerges>
                        <!-- We exclude artifacts which constantly cause the THIRD-PARTY.properties file to be
                             modified and for which we know the license is from Atlassian -->
                        <excludedArtifacts>xercesImpl</excludedArtifacts>

                    </configuration>
                </plugin>
            </plugins>
        </pluginManagement>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-enforcer-plugin</artifactId>
                <configuration>
                    <rules>
                        <requireMavenVersion>
                            <!-- It's for AMPS, it fails under that -->
                            <version>3.8.4</version>
                        </requireMavenVersion>
                        <requireJavaVersion>
                            <!-- We compile the polyfill for Confluence 9.0 in Java 17.
                                 All other .class will be in Java 8 (class version 52) because of Jira <9.10 and <C8.0.
                            -->
                            <version>[11, 18)</version>
                        </requireJavaVersion>
                    </rules>
                </configuration>
                <executions>
                    <execution>
                        <id>enforce-java</id>
                        <goals>
                            <goal>enforce</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.13.0</version>
                <configuration>
                    <source>${java.version}</source>
                    <target>${java.version}</target>
                </configuration>
            </plugin>
        </plugins>
    </build>

    <profiles>
        <profile>
            <id>vulnerabilities</id>
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.owasp</groupId>
                        <artifactId>dependency-check-maven</artifactId>
                        <executions>
                            <execution>
                                <goals>
                                    <goal>check</goal>
                                </goals>
                            </execution>
                      </executions>
                    </plugin>
                    <plugin>
                        <groupId>org.codehaus.mojo</groupId>
                        <artifactId>license-maven-plugin</artifactId>
                    </plugin>
                    <plugin>
                        <!-- Suggest to upgrade our libraries, plugins and properties -->
                        <groupId>org.codehaus.mojo</groupId>
                        <artifactId>versions-maven-plugin</artifactId>
                        <executions>
                            <execution>
                                <phase>validate</phase>
                                <goals>
                                    <goal>display-dependency-updates</goal>
                                    <goal>display-plugin-updates</goal>
                                    <goal>display-property-updates</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>
    </profiles>

    <distributionManagement>
        <!-- To deploy, either run ./release.sh, or run: mvn clean deploy -Prelease
        
            If you have a 401:Unauthorized error when doing 'mvn deploy', check that:
             - You have set your user/password in the <servers> section of ~/.m2/settings.xml
             - You have a section <extensions> with wagon-http 2.10, to fix a bug of maven-deploy-plugin.
         -->
        <repository>
            <id>yogi.public.releases</id>
            <url>https://maven.dev.requirementyogi.com/repository/public-release</url>
        </repository>
        <snapshotRepository>
            <id>yogi.public.snapshots</id>
            <url>https://maven.dev.requirementyogi.com/repository/public-snapshots</url>
        </snapshotRepository>
    </distributionManagement>

    <properties>
        <java.version>8</java.version>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <allowGoogleTracking>false</allowGoogleTracking>
        <downloadSources>true</downloadSources>
        <downloadJavadocs>true</downloadJavadocs>
        <failBuildOnCVSS>7</failBuildOnCVSS>

        <libs.dependency-check-maven.version>10.0.3</libs.dependency-check-maven.version>
    </properties>

</project>
